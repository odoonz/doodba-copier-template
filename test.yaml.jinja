{%- import "_traefik1_labels.yml.jinja" as traefik1_labels -%}
{%- import "_traefik2_labels.yml.jinja" as traefik2_labels -%}
{%- set key = traefik2_labels.key(project_name, odoo_version, "test") -%}
version: "2.4"

services:
  odoo:
    extends:
      file: common.yaml
      service: odoo
    env_file:
      - .docker/odoo.env
      - .docker/db-access.env
    environment:
      DOODBA_ENVIRONMENT: "${DOODBA_ENVIRONMENT-test}"
      # To install demo data export DOODBA_WITHOUT_DEMO=false
      WITHOUT_DEMO: "${DOODBA_WITHOUT_DEMO-all}"
      SMTP_PORT: "1025"
      SMTP_SERVER: smtplocal
    restart: unless-stopped
    depends_on:
      - db
      - smtp
    networks:
      default:
      globalwhitelist_shared:
    {%- if odoo_proxy == "traefik" and domains_staging %}
      inverseproxy_shared:
    labels:
      {#- Traefik v1 labels, to be removed when unsupported #}
      traefik.frontend.headers.customResponseHeaders: "X-Robots-Tag:noindex, nofollow"
      {%- call traefik1_labels.odoo(domains_staging, ["/"]) %}{% endcall %}
      {%- call traefik2_labels.odoo(
        domains_staging,
        cidr_whitelist,
        _key,
        odoo_version,
        ["/"],
        project_name,
      ) %}{% endcall %}
    {%- endif %}
    command:
      - odoo
      - --workers=2
      - --max-cron-threads=1

  db:
    extends:
      file: common.yaml
      service: db
    env_file:
      - .docker/db-creation.env
    restart: unless-stopped

  smtp:
    extends:
      file: common.yaml
      service: smtpfake
    restart: unless-stopped
    networks:
      default:
        aliases:
          - smtplocal
    {%- if odoo_proxy == "traefik" and domains_staging %}
      inverseproxy_shared:
    labels:
      traefik.docker.network: "inverseproxy_shared"
      traefik.enable: "true"
      traefik.frontend.passHostHeader: "true"
      traefik.frontend.rule:
        Host:
        {%- for main_domain in domains_staging -%}
          $DOMAIN_STAGING_{{ loop.index0 }}
          {%- if not loop.last %},{% endif -%}
        {%- endfor -%};PathPrefixStrip:/smtpfake/
      traefik.port: "8025"
      # Mailhog service
      traefik.http.middlewares.{{ _key }}-mailhog-stripprefix.stripPrefix.prefixes: /smtpfake
      traefik.http.routers.{{ _key }}-mailhog.entrypoints: web-main
      traefik.http.routers.{{ _key }}-mailhog.middlewares:
        {{ _key }}-buffering,
        {{ _key }}-compress,
        {{ _key }}-forbid-crawlers,
        {{ _key }}-mailhog-stripprefix
        {%- if cidr_whitelist %}, {{ _key }}-whitelist{% endif %}
      traefik.http.routers.{{ _key }}-mailhog.rule:
        Host(
          {%- for main_domain in domains_staging -%}
            `$DOMAIN_STAGING_{{ loop.index0 }}`
            {%- if not loop.last %}, {% endif -%}
          {%- endfor -%}
        ) && PathPrefix(`/smtpfake/`)
      traefik.http.routers.{{ _key }}-mailhog.service: {{ _key }}-mailhog
      {%- if traefik_cert_resolver %}
      traefik.http.routers.{{ _key }}-mailhog.tls.certresolver: "{{ traefik_cert_resolver }}"
      {%- endif %}
      traefik.http.services.{{ _key }}-mailhog.loadbalancer.server.port: 8025
    {%- endif %}
    volumes:
      - "smtpconf:/etc/mailhog:ro,z"
    entrypoint: [sh, -c]
    command:
      - test -r /etc/mailhog/auth && export MH_AUTH_FILE=/etc/mailhog/auth; exec MailHog

networks:
  default:
    internal: true
    driver_opts:
      encrypted: 1

  globalwhitelist_shared:
    external: true
  {%- if odoo_proxy == "traefik" %}

  inverseproxy_shared:
    external: true
  {%- endif %}

volumes:
  filestore:
  db:
  smtpconf:
